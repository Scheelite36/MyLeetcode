/*
 * @lc app=leetcode.cn id=474 lang=java
 *
 * [474] 一和零
 * 
 * 给你一个二进制字符串数组 strs 和两个整数 m 和 n 。

请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。

如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。

 

示例 1：

输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
输出：4
解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。
示例 2：

输入：strs = ["10", "0", "1"], m = 1, n = 1
输出：2
解释：最大的子集是 {"0", "1"} ，所以答案是 2 。



我们把每个字符串看做是一件物品，把字符串中0的数目和1的数目看做是两种“重量”，
所以就变成了一个二维01背包问题，书包的两个限重分别是 m 和 n，要求书包能装下的物品的最大数目
（也相当于价值最大，设每个物品价值为1）。

我们可以提前把每个字符串的两个“重量” w0和w1算出来用数组存放，
但是注意到只需要用一次这两个值，所以我们只需在用到的时候计算w0和w1就行了，
这样就不用额外的数组存放。
 */

// @lc code=start
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int len = strs.length;
        int[][] dp = new int[m+1][n+1];
        for (int i=0;i<len;i++){
            // 计算0和1
            int w0 = 0,w1=0;
            for (char c:strs[i].toCharArray()){
                if (c=='0') w0++;
                else w1++;
            }
            for(int j=m;j>=w0;j--){
                for (int l=n;l>=w1;l--){
                    dp[j][l] = Math.max(dp[j][l], dp[j-w0][l-w1]+1);
                }
            }
        }
        return dp[m][n];
    }
}
// @lc code=end

